name: Release (Optimized for Disk Space)

on:
  workflow_call:
    inputs:
      release-command:
        description: 'The command that will release packages as part of the final step'
        required: true
        type: string
      release-tag:
        description: 'The tag used to release the packages under'
        required: false
        type: string
      type:
        description: 'The type of release, usually corresponds to the dist-tag'
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      SENTRY_ORG:
        required: true
      SENTRY_PROJECT:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true

env:
  ATLASPACK_RELEASE_TAG: '${{ inputs.release-tag }}'

permissions:
  contents: write # for actions/checkout and adding tag

jobs:
  build-native-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux AMD64
          - name: x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04

          # Linux ARM64
          - name: aarch64-unknown-linux-gnu
            target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container:
      image: debian:bullseye-slim
      options: --shm-size=2g  # Increase shared memory
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y build-essential curl nodejs npm
          npm i -g yarn
      - name: Install Rust
        uses: ./.github/actions/rust-toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-node
        with:
          node-version: 22
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: '${{ matrix.name }}'
          save-if: ${{ github.ref == 'refs/heads/main' }}
          # Optimize cache to reduce disk usage
          cache-directories: |
            ~/.cargo/registry
            ~/.cargo/git
            target
      - name: Monitor disk usage before build
        run: |
          echo "=== Disk usage before build ==="
          df -h
          echo "=== Largest directories in workspace ==="
          du -sh * | sort -hr | head -10
          echo "=== Rust target directory size ==="
          du -sh target/ 2>/dev/null || echo "No target directory yet"
      - name: Clean up previous build artifacts
        run: |
          echo "=== Cleaning up previous build artifacts ==="
          # Clean up cargo build artifacts for this specific target
          cargo clean --target ${{ matrix.target }} --profile release 2>/dev/null || true
          # Remove any leftover debug symbols
          find target -name "*.dSYM" -type d -exec rm -rf {} + 2>/dev/null || true
          find target -name "*.pdb" -type f -exec rm -f {} + 2>/dev/null || true
          # Clean up temporary files
          rm -rf /tmp/rustc* /tmp/cargo* 2>/dev/null || true
          # Clean up node_modules to free space
          rm -rf node_modules/.cache 2>/dev/null || true
          # Clean up any large log files
          find . -name "*.log" -size +100M -delete 2>/dev/null || true
          echo "=== Disk usage after cleanup ==="
          df -h
      - name: Build core crates first
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release-ci
        run: |
          echo "=== Building core crates first ==="
          # Build core crates without the large node bindings
          cargo build --target ${{ matrix.target }} --profile release-ci --workspace --exclude atlaspack-node-bindings
          echo "=== Disk usage after core crates ==="
          df -h
      - name: Clean up intermediate files
        run: |
          echo "=== Cleaning up intermediate files ==="
          # Remove intermediate build artifacts to free space
          find target/${{ matrix.target }}/release/deps -name "*.rlib" -delete 2>/dev/null || true
          find target/${{ matrix.target }}/release/build -type d -name "out" -exec rm -rf {} + 2>/dev/null || true
          # Clean up any large temporary files
          find /tmp -name "rustc*" -type d -exec rm -rf {} + 2>/dev/null || true
          echo "=== Disk usage after intermediate cleanup ==="
          df -h
      - name: Build node bindings
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release-ci
        run: |
          echo "=== Building node bindings ==="
          # Build only the node bindings
          cargo build --target ${{ matrix.target }} --profile release-ci -p atlaspack-node-bindings
          echo "=== Disk usage after node bindings ==="
          df -h
      - name: Run napi build
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release-ci
        run: |
          echo "=== Running napi build ==="
          # Run the napi build process
          yarn build-native
          echo "=== Disk usage after napi build ==="
          df -h
      - name: Monitor disk usage after build
        run: |
          echo "=== Disk usage after build ==="
          df -h
          echo "=== Target directory size after build ==="
          du -sh target/ 2>/dev/null || echo "No target directory"
          echo "=== Largest files in target directory ==="
          find target/ -type f -size +10M -exec ls -lh {} \; 2>/dev/null | head -20 || echo "No large files found"
      - name: Upload debug symbols to sentry
        run: node "./scripts/debug-symbols.mjs" --upload-to-sentry --rm
        env:
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.target }}
          path: packages/**/*

  build-native-macos:
    strategy:
      fail-fast: false
      matrix:
        include:
          # MACOS ARM64
          - name: aarch64-apple-darwin
            target: aarch64-apple-darwin

          # MACOS AMD64
          - name: x86_64-apple-darwin
            target: x86_64-apple-darwin
    name: ${{ matrix.name }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: ./.github/actions/rust-toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-node
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: '${{ matrix.name }}'
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: Build native packages
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release
        run: yarn build-native
      - name: Upload debug symbols to sentry
        run: node "./scripts/debug-symbols.mjs" --upload-to-sentry --rm
        env:
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.target }}
          path: packages/**/*

  build-and-release:
    name: Build and release
    needs:
      - build-native-linux
      - build-native-macos
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}
      - uses: ./.github/actions/setup-node
      - uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: packages
          merge-multiple: true
      - name: Debug
        run: ls -l packages/*/*/*.node
      - name: Npm
        run: |
          npm config set "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"
          npm config set registry https://registry.npmjs.org/
      - run: ${{ inputs.release-command }}

  build-and-release-changesets:
    name: Build and release Changesets
    if: github.ref_name == 'main'
    needs: build-and-release
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.ATLASPACK_CI_APP_ID }}
          private-key: ${{ secrets.ATLASPACK_CI_PRIVATE_KEY }}
      - uses: ./.github/actions/setup-node
      - uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: packages
          merge-multiple: true
      - uses: changesets/action@v1
        with:
          publish: yarn changesets-publish
          createGithubReleases: false
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
