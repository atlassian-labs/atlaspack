name: Release

on:
  workflow_call:
    inputs:
      release-command:
        description: 'The command that will release packages as part of the final step'
        required: true
        type: string
      type:
        description: 'The type of release, usually corresponds to the dist-tag'
        required: true
        type: string
    secrets:
      NPM_TOKEN:
        required: true
      SENTRY_ORG:
        required: true
      SENTRY_PROJECT:
        required: true
      SENTRY_AUTH_TOKEN:
        required: true

permissions:
  contents: write # for actions/checkout and adding tag

jobs:
  build-native-linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux AMD64
          - name: x86_64-unknown-linux-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04

          # Linux ARM64
          - name: aarch64-unknown-linux-gnu
            target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm

          # # Linux ARM
          # We don't support 32 bit linux
          # - name: arm-unknown-linux-gnueabihf
          #   os: ubuntu-22.04
          #   target: arm-unknown-linux-gnueabihf
          #   run: apt install -y gcc-arm-linux-gnueabihf

    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container:
      image: debian:bullseye-slim
    steps:
      - uses: actions/checkout@v4
      - name: Install dependencies
        # We need to install nodejs because `setup-node` requires
        # the runner to have nodejs installed (https://github.com/actions/setup-node/issues/1287)
        run: |
          apt-get update
          apt-get install -y build-essential curl nodejs npm
          npm i -g yarn
      - name: Install Rust
        uses: ./.github/actions/rust-toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-node
        with:
          node-version: 22
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: '${{ matrix.name }}'
          # Only store new caches on main
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: Build native packages
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release
        run: yarn build-native
      - name: Upload debug symbols to sentry
        run: node "./scripts/debug-symbols.mjs" --upload-to-sentry --rm
        env:
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.target }}
          path: packages/**/*

  build-native-macos:
    strategy:
      fail-fast: false
      matrix:
        include:
          # MACOS ARM64
          - name: aarch64-apple-darwin
            target: aarch64-apple-darwin

          # MACOS AMD64
          - name: x86_64-apple-darwin
            target: x86_64-apple-darwin
    name: ${{ matrix.name }}
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: ./.github/actions/rust-toolchain
        with:
          targets: ${{ matrix.target }}
      - uses: ./.github/actions/setup-node
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: '${{ matrix.name }}'
          # Only store new caches on main
          save-if: ${{ github.ref == 'refs/heads/main' }}
      - name: Build native packages
        env:
          RUSTUP_TARGET: ${{ matrix.target }}
          CARGO_PROFILE: release
        run: yarn build-native
      - name: Upload debug symbols to sentry
        run: node "./scripts/debug-symbols.mjs" --upload-to-sentry --rm
        env:
          SENTRY_ORG: ${{secrets.SENTRY_ORG}}
          SENTRY_PROJECT: ${{secrets.SENTRY_PROJECT}}
          SENTRY_AUTH_TOKEN: ${{secrets.SENTRY_AUTH_TOKEN}}
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.target }}
          path: packages/**/*

  build-and-release:
    name: Build and release
    needs:
      - build-native-linux
      - build-native-macos
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with: {fetch-depth: 0}
      - uses: ./.github/actions/setup-node
      - uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: packages
          merge-multiple: true
      - name: Debug
        run: ls -l packages/*/*/*.node
      - name: Npm
        run: |
          npm config set "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"
          npm config set registry https://registry.npmjs.org/
      - run: ${{ inputs.release-command }}
      - name: Get canary version
        if: ${{ inputs.type == 'canary' }}
        id: canary-version
        run: echo "VERSION_TAG=$(npm show @atlaspack/cli@canary --json | jq .version -r)" >> "$GITHUB_OUTPUT"
      - name: Create tag
        uses: actions/github-script@v5
        if: ${{ inputs.type == 'canary' }}
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ steps.canary-version.outputs.VERSION_TAG }}'.trim(),
              sha: context.sha
            })

  build-and-release-changesets:
    name: Build and release Changesets
    if: github.ref_name == 'main'
    needs:
      - build-native-linux
      - build-native-macos
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/create-github-app-token@v2
        id: app-token
        with:
          app-id: ${{ vars.ATLASPACK_CI_APP_ID }}
          private-key: ${{ secrets.ATLASPACK_CI_PRIVATE_KEY }}
      - uses: ./.github/actions/setup-node
      - uses: actions/download-artifact@v4
        with:
          pattern: packages-*
          path: packages
          merge-multiple: true
      - uses: changesets/action@v1
        with:
          publish: yarn changesets-publish
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
