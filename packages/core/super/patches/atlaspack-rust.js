/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/* auto-generated by NAPI-RS */

const { readFileSync } = require('fs')

const {platform, arch} = process;

let nativeBinding = null;
let loadError = null;

function isMusl() {
  // For Node 10
  if (!process.report || typeof process.report.getReport !== 'function') {
    try {
      const lddPath = require('child_process')
        .execSync('which ldd')
        .toString()
        .trim();
      return readFileSync(lddPath, 'utf8').includes('musl');
    } catch (e) {
      return true;
    }
  } else {
    const {glibcVersionRuntime} = process.report.getReport().header;
    return !glibcVersionRuntime;
  }
}

switch (platform) {
  case 'android':
    switch (arch) {
      case 'arm64':
        try {
          nativeBinding = require('./index.android-arm64.node');
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm':
        try {
          nativeBinding = require('./index.android-arm-eabi.node');
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Android ${arch}`);
    }
    break;
  case 'win32':
    switch (arch) {
      case 'x64':
        try {
          nativeBinding = require('./index.win32-x64-msvc.node');
        } catch (e) {
          loadError = e;
        }
        break;
      case 'ia32':
        try {
          nativeBinding = require('./index.win32-ia32-msvc.node');
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm64':
        try {
          nativeBinding = require('./index.win32-arm64-msvc.node');
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Windows: ${arch}`);
    }
    break;
  case 'darwin':
    try {
      nativeBinding = require('./index.darwin-universal.node');
      break;
    } catch {}
    switch (arch) {
      case 'x64':
        try {
          nativeBinding = require('./index.darwin-x64.node');
        } catch (e) {
          loadError = e;
        }
        break;
      case 'arm64':
        try {
          nativeBinding = require('./index.darwin-arm64.node');
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on macOS: ${arch}`);
    }
    break;
  case 'freebsd':
    if (arch !== 'x64') {
      throw new Error(`Unsupported architecture on FreeBSD: ${arch}`);
    }
    try {
      nativeBinding = require('./index.freebsd-x64.node');
    } catch (e) {
      loadError = e;
    }
    break;
  case 'linux':
    switch (arch) {
      case 'x64':
        if (isMusl()) {
          try {
            nativeBinding = require('./index.linux-x64-musl.node');
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require('./index.linux-x64-gnu.node');
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 'arm64':
        if (isMusl()) {
          try {
            nativeBinding = require('./index.linux-arm64-musl.node');
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require('./index.linux-arm64-gnu.node');
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 'arm':
        if (isMusl()) {
          try {
            nativeBinding = require('./index.linux-arm-musleabihf.node');
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require('./index.linux-arm-gnueabihf.node');
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 'riscv64':
        if (isMusl()) {
          try {
            nativeBinding = require('./index.linux-riscv64-musl.node');
          } catch (e) {
            loadError = e;
          }
        } else {
          try {
            nativeBinding = require('./index.linux-riscv64-gnu.node');
          } catch (e) {
            loadError = e;
          }
        }
        break;
      case 's390x':
        try {
          nativeBinding = require('./index.linux-s390x-gnu.node');
        } catch (e) {
          loadError = e;
        }
        break;
      default:
        throw new Error(`Unsupported architecture on Linux: ${arch}`);
    }
    break;
  default:
    throw new Error(`Unsupported OS: ${platform}, architecture: ${arch}`);
}

if (!nativeBinding) {
  if (loadError) {
    throw loadError;
  }
  throw new Error(`Failed to load native binding`);
}

const {
  initTracingSubscriber,
  Lmdb,
  findAncestorFile,
  findFirstFile,
  findNodeModule,
  hashString,
  hashBuffer,
  Hash,
  optimizeImage,
  AtlaspackTracer,
  createAssetId,
  atlaspackNapiCreate,
  atlaspackNapiBuildAssetGraph,
  atlaspackNapiRespondToFsEvents,
  createDependencyId,
  createEnvironmentId,
  getAvailableThreads,
  initializeMonitoring,
  closeMonitoring,
  newNodejsWorker,
  runInlineRequiresOptimizer,
  Resolver,
  performStringReplacements,
  transform,
  transformAsync,
  getVcsStateSnapshot,
  getEventsSince,
} = nativeBinding;

module.exports.initTracingSubscriber = initTracingSubscriber;
module.exports.Lmdb = Lmdb;
module.exports.findAncestorFile = findAncestorFile;
module.exports.findFirstFile = findFirstFile;
module.exports.findNodeModule = findNodeModule;
module.exports.hashString = hashString;
module.exports.hashBuffer = hashBuffer;
module.exports.Hash = Hash;
module.exports.optimizeImage = optimizeImage;
module.exports.AtlaspackTracer = AtlaspackTracer;
module.exports.createAssetId = createAssetId;
module.exports.atlaspackNapiCreate = atlaspackNapiCreate;
module.exports.atlaspackNapiBuildAssetGraph = atlaspackNapiBuildAssetGraph;
module.exports.atlaspackNapiRespondToFsEvents = atlaspackNapiRespondToFsEvents;
module.exports.createDependencyId = createDependencyId;
module.exports.createEnvironmentId = createEnvironmentId;
module.exports.getAvailableThreads = getAvailableThreads;
module.exports.initializeMonitoring = initializeMonitoring;
module.exports.closeMonitoring = closeMonitoring;
module.exports.newNodejsWorker = newNodejsWorker;
module.exports.runInlineRequiresOptimizer = runInlineRequiresOptimizer;
module.exports.Resolver = Resolver;
module.exports.performStringReplacements = performStringReplacements;
module.exports.transform = transform;
module.exports.transformAsync = transformAsync;
module.exports.getVcsStateSnapshot = getVcsStateSnapshot;
module.exports.getEventsSince = getEventsSince;
