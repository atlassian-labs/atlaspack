{
  "tests": [
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should auto install @babel/core v7",
      "status": "pending"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should auto install babel plugins",
      "status": "pending"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling with babel using .babelrc config",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should compile with babel with default engines if no config",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling with babel using browserlist",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should only include necessary parts of core-js using browserlist",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling with babel using browserslist for different environments",
      "status": "pending"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "can build using @babel/preset-env when engines have semver ranges",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should not compile node_modules by default",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should compile node_modules with browserslist to app target",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should compile node_modules when symlinked with a source field in package.json",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should not compile node_modules with a source field in package.json when not symlinked",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling JSX",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling JSX in JS files with React dependency",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling JSX in JS files with Preact dependency",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling JSX in JS files with Nerv dependency",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling JSX in JS files with Hyperapp dependency",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should strip away flow types of node modules",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling with babel using babel.config.js config",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support compiling with babel using babel.config.js config with a require in it",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support multitarget builds using a custom babel config with @atlaspack/babel-preset-env",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support building with default babel config when running atlaspack globally",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should support building with custom babel config when running atlaspack globally",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should rebuild when .babelrc changes",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should invalidate babel.config.js across runs",
      "status": "passing"
    },
    {
      "fileName": "babel",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/babel.js",
      "title": "should invalidate when babel plugins are upgraded across runs",
      "status": "passing"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should bundle once before exporting middleware",
      "status": "pending"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should defer bundling if a bundle is pending",
      "status": "pending"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should enforce asset type path to be a string",
      "status": "pending"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should enforce setup before bundling",
      "status": "pending"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should support multiple entry points",
      "status": "pending"
    },
    {
      "fileName": "bundler",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/bundler.js",
      "title": "should support multiple entry points as a glob",
      "status": "pending"
    },
    {
      "fileName": "contentHashing",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/contentHashing.js",
      "title": "should update content hash when content changes",
      "status": "passing"
    },
    {
      "fileName": "contentHashing",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/contentHashing.js",
      "title": "should update content hash when raw asset changes",
      "status": "passing"
    },
    {
      "fileName": "contentHashing",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/contentHashing.js",
      "title": "should consider bundles with identical contents coming from different filepaths unique",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should produce two bundles when importing a CSS file",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should bundle css dependencies in the correct, postorder traversal order",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should support loading a CSS bundle along side dynamic imports",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should support importing CSS from a CSS file",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should support linking to assets with url() from CSS",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should support linking to assets with url() from CSS in production",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should support linking to assets in parent folders with url() from CSS",
      "status": "passing"
    },
    {
      "fileName": "css",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/css.js",
      "title": "should minify CSS when minify is set",
      "status": "passing"
    },
    {
      "fileName": "elm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/elm.js",
      "title": "should produce a basic Elm bundle",
      "status": "pending"
    },
    {
      "fileName": "elm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/elm.js",
      "title": "should produce a elm bundle with debugger",
      "status": "pending"
    },
    {
      "fileName": "elm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/elm.js",
      "title": "should apply elm-hot if HMR is enabled",
      "status": "pending"
    },
    {
      "fileName": "elm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/elm.js",
      "title": "should remove debugger in production",
      "status": "pending"
    },
    {
      "fileName": "elm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/elm.js",
      "title": "should minify Elm in production mode",
      "status": "pending"
    },
    {
      "fileName": "encodedURI",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/encodedURI.js",
      "title": "should support bundling files which names in encoded URI",
      "status": "pending"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file as a string",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file as a buffer",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require alias",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require inline",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require assignment",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require assignment alias",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require destructure",
      "status": "pending"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs require destructure assignment",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs ES6 import",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should inline a file with fs ES6 import and path.join",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should not evaluate fs calls when package.browser.fs is false",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should ignore fs calls when the filename is not evaluable",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should ignore fs calls when the options are not evaluable",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should not inline a file in a node environment",
      "status": "passing"
    },
    {
      "fileName": "fs",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/fs.js",
      "title": "should not inline a file in an Electron environment",
      "status": "pending"
    },
    {
      "fileName": "glob",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/glob.js",
      "title": "should require a glob of files",
      "status": "pending"
    },
    {
      "fileName": "glob",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/glob.js",
      "title": "should require nested directories with a glob",
      "status": "pending"
    },
    {
      "fileName": "glob",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/glob.js",
      "title": "should support importing a glob of CSS files",
      "status": "pending"
    },
    {
      "fileName": "glsl",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/glsl.js",
      "title": "should support requiring GLSL files via glslify",
      "status": "pending"
    },
    {
      "fileName": "graphql",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/graphql.js",
      "title": "should support requiring graphql files",
      "status": "pending"
    },
    {
      "fileName": "graphql",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/graphql.js",
      "title": "should support importing other graphql files from a graphql file",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should emit an HMR update for the file that changed",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should emit an HMR update for all new dependencies along with the changed file",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should emit an HMR error on bundle failure",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should emit an HMR error to new connections after a bundle failure",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should emit an HMR update after error has been resolved",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should work with circular dependencies",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should accept HMR updates in the runtime after an initial error",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should call dispose and accept callbacks",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should work across bundles",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should bubble up HMR events to a page reload",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should trigger a page reload when a new bundle is created",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should log emitted errors and show an error overlay",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should log when errors resolve",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should make a secure connection",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should make a secure connection with custom certificate",
      "status": "pending"
    },
    {
      "fileName": "hmr",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/hmr.js",
      "title": "should watch new dependencies that cause errors",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support bundling HTML",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should find href attr when not first",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should insert sibling CSS bundles for JS files in the HEAD",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should insert sibling bundles before body element if no HEAD",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should insert sibling JS bundles for CSS files in the HEAD",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should insert sibling bundles at correct location in tree when optional elements are absent",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should minify HTML in production mode",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should work with an empty html file",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should read .htmlnanorc.json and minify HTML in production mode",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should not minify default values inside HTML in production mode",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should not prepend the public path to assets with remote URLs",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should not prepend the public path to hash links",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should detect virtual paths",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should not update root/main file in the bundles",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should preserve the spacing in the HTML tags",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support child bundles of different types",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support circular dependencies",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support bundling HTM",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should detect srcset attribute",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should detect srcset attribute of source element",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support webmanifest",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should treat webmanifest as an entry module so it doesn't get content hashed",
      "status": "pending"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should bundle svg files correctly",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should bundle svg files using <image xlink:href=\"\"> correctly",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should bundle scripts inside svg",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should support data attribute of object element",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should resolve assets containing spaces",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should process inline JS",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should add an inline sourcemap to inline JS",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should process inline styles",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should process inline styles using lang",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should process inline non-js scripts",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should handle inline css with @imports",
      "status": "passing"
    },
    {
      "fileName": "html",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/html.js",
      "title": "should allow imports and requires in inline <script> tags",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should produce a basic JS bundle with CommonJS requires",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should produce a basic JS bundle with ES6 imports",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should detect dependencies inserted by a prior transform",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should produce a basic JS bundle with object rest spread support",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should bundle node_modules for a browser environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not bundle node_modules for a node environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not bundle node_modules on --target=electron",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should preserve hashbangs in bundles and preserve executable file mode",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not preserve hashbangs in browser bundles",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should preserve hashbangs in scopehoisted bundles",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should bundle node_modules for a node environment if includeNodeModules is specified",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should bundle builtins for a browser environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not bundle builtins for a node environment if includeNodeModules is specified",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should bundle node_modules on --target=electron and --bundle-node-modules",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should produce a JS bundle with default exports and no imports",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should split bundles when a dynamic import is used a browser environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should split bundles when a dynamic import is used with a node environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should load dynamic bundle when entry is in a subdirectory",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "Should not run atlaspack over external modules",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling workers",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling workers of type module",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling workers with different order",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling service-workers",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling workers with circular dependencies",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support bundling in workers with other loaders",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not deduplicate assets from a parent bundle in workers",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should dynamic import files which import raw files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should return all exports as an object when using ES modules",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should duplicate small modules across multiple bundles",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should create a separate bundle for large modules shared between bundles",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not duplicate a module which is already in a parent bundle",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should duplicate a module if it is not present in every parent bundle",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support shared modules with async imports",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support requiring JSON files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support requiring JSON5 files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support importing a URL to a raw asset",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should minify JS in production mode",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should use uglify config",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should insert global variables when needed",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should handle re-declaration of the global constant",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should insert environment variables inserted by a prior transform",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not insert environment variables in node environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not insert environment variables in electron environment",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should insert environment variables in browser environment",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should insert environment variables from a file",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support adding implicit dependencies",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support requiring YAML files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support requiring TOML files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support requiring CoffeeScript files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should resolve the browser field before main",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not resolve the browser field for --target=node",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should resolve advanced browser resolution",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not resolve advanced browser resolution with --target=node",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should resolve the module field before main",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should resolve the module field before main",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should resolve the main field",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should minify JSON files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should minify JSON5 files",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should minify YAML for production",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should minify TOML for production",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support optional dependencies in try...catch blocks",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support excluding dependencies in falsy branches",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not autoinstall if resolve failed on installed module",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not autoinstall if resolve failed on aliased module",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should ignore require if it is defined in the scope",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should expose to CommonJS entry point",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should expose to RequireJS entry point",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should expose variable with --browser-global",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should set `define` to undefined so AMD checks in UMD modules do not pass",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not dedupe imports with different contents",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not dedupe imports with same content but different absolute dependency paths",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should dedupe imports with same content and same dependency paths",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not dedupe assets that exist in more than one bundle",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support importing HTML from JS async",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support importing HTML from JS async with --target=node",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support importing HTML from JS sync",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should stub require.cache",
      "status": "pending"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should support async importing the same module from different bundles",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should not create shared bundles from contents of entries",
      "status": "passing"
    },
    {
      "fileName": "javascript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/javascript.js",
      "title": "should import the same dependency multiple times in the same bundle",
      "status": "passing"
    },
    {
      "fileName": "json-reporter",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/json-reporter.js",
      "title": "logs bundling a commonjs bundle to stdout as json",
      "status": "passing"
    },
    {
      "fileName": "kotlin",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/kotlin.js",
      "title": "should produce a basic kotlin bundle",
      "status": "pending"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support requiring less files",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support less imports",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support advanced less imports",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support requiring empty less files",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support linking to assets with url() from less",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support transforming less with postcss",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should throw an exception when using webpack syntax",
      "status": "passing"
    },
    {
      "fileName": "less",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/less.js",
      "title": "should support configuring less include paths",
      "status": "passing"
    },
    {
      "fileName": "markdown",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/markdown.js",
      "title": "should support bundling Markdown",
      "status": "pending"
    },
    {
      "fileName": "metrics-reporter",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/metrics-reporter.js",
      "title": "Should dump bundle metrics to atlaspack-metrics.json",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should build multiple packages in a monorepo at once, pointing at index files",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should build multiple packages in a monorepo at once, pointing at directories with \"source\" field in package.json",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should build multiple packages in a monorepo at once, pointing at a glob of files",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should build multiple packages in a monorepo at once, pointing at a glob of directories",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should watch glob entries and build new packages that are added",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should watch package.json containing \"source\" field for changes",
      "status": "passing"
    },
    {
      "fileName": "monorepos",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/monorepos.js",
      "title": "should watch package.json containing targets for changes",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output (exports)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output (module.exports)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output from esmodule input",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with external modules (require)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with external modules (named import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with external modules (namespace import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with external modules (default import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with external modules (multiple specifiers)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with old node without destructuring (single)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with old node without destructuring (multiple)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with old browsers without destructuring (single)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support commonjs output with old node without destructuring (multiple)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support importing sibling bundles in library mode",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support async imports",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support async split bundles",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output (named export)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output (default identifier)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output (default function)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output (multiple)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output (re-export)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output with external modules (named import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output with external modules (namespace import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output with external modules (default import)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support esmodule output with external modules (multiple specifiers)",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support importing sibling bundles in library mode",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should rename imports that conflict with exports",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support async imports",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support async split bundles",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support building esmodules for browser targets",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support use an import polyfill for older browsers",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support building esmodules with css imports",
      "status": "passing"
    },
    {
      "fileName": "output-formats",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/output-formats.js",
      "title": "should support building esmodules with split bundles",
      "status": "passing"
    },
    {
      "fileName": "atlaspack-register",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parcel-register.js",
      "title": "can be required at an entry script and transform following requires",
      "status": "pending"
    },
    {
      "fileName": "atlaspack-register",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parcel-register.js",
      "title": "can transform with --r and --require",
      "status": "pending"
    },
    {
      "fileName": "atlaspack-register",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parcel-register.js",
      "title": "enables Atlaspack's resolver in node",
      "status": "pending"
    },
    {
      "fileName": "atlaspack-register",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parcel-register.js",
      "title": "can be disposed of, which reverts resolving",
      "status": "pending"
    },
    {
      "fileName": "atlaspack-register",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parcel-register.js",
      "title": "can be disposed of, which reverts transforming",
      "status": "pending"
    },
    {
      "fileName": "parser",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/parser.js",
      "title": "should support case-insensitive file extension",
      "status": "pending"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support transforming css modules with postcss",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support transforming with postcss twice with the same result",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support postcss composes imports",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should not include css twice for postcss composes imports",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support postcss composes imports for sass",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support postcss composes imports with custom path names",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support deep nested postcss composes imports",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should support postcss composes imports for multiple selectors",
      "status": "passing"
    },
    {
      "fileName": "postcss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/postcss.js",
      "title": "should automatically install postcss plugins if needed",
      "status": "passing"
    },
    {
      "fileName": "posthtml",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/posthtml.js",
      "title": "should support transforming HTML with posthtml",
      "status": "passing"
    },
    {
      "fileName": "posthtml",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/posthtml.js",
      "title": "should find assets inside posthtml",
      "status": "passing"
    },
    {
      "fileName": "posthtml",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/posthtml.js",
      "title": "should add dependencies referenced by posthtml-include",
      "status": "pending"
    },
    {
      "fileName": "posthtml",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/posthtml.js",
      "title": "should add dependencies referenced by plugins",
      "status": "pending"
    },
    {
      "fileName": "proxy",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/proxy.js",
      "title": "should handle proxy table written in .proxyrc",
      "status": "passing"
    },
    {
      "fileName": "proxy",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/proxy.js",
      "title": "should handle proxy table written in .proxyrc.js",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support bundling HTML",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support include and extends files, connect files",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support variables",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support mixins",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support filters",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should support locals with config file",
      "status": "passing"
    },
    {
      "fileName": "pug",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/pug.js",
      "title": "should minify HTML in production mode",
      "status": "passing"
    },
    {
      "fileName": "reason",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/reason.js",
      "title": "should produce a bundle",
      "status": "pending"
    },
    {
      "fileName": "resolver",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/resolver.js",
      "title": "should support resolving tilde in monorepo packages",
      "status": "passing"
    },
    {
      "fileName": "resolver",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/resolver.js",
      "title": "should correctly resolve tilde in node_modules",
      "status": "passing"
    },
    {
      "fileName": "resolver",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/resolver.js",
      "title": "should throw an error on Webpack loader imports",
      "status": "passing"
    },
    {
      "fileName": "rust",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/rust.js",
      "title": "should generate a wasm file from a rust file with rustc with --target=browser",
      "status": "pending"
    },
    {
      "fileName": "rust",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/rust.js",
      "title": "should generate a wasm file from a rust file with rustc with --target=node",
      "status": "pending"
    },
    {
      "fileName": "rust",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/rust.js",
      "title": "should support rust files with dependencies via rustc",
      "status": "pending"
    },
    {
      "fileName": "rust",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/rust.js",
      "title": "should generate a wasm file from a rust file with cargo",
      "status": "pending"
    },
    {
      "fileName": "rust",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/rust.js",
      "title": "should generate a wasm file from a rust file in cargo workspace",
      "status": "pending"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support requiring sass files",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support requiring scss files",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support scss imports",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support requiring empty scss files",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support linking to assets with url() from scss",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support transforming scss with postcss",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support advanced import syntax",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support absolute imports",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should throw an exception when using webpack syntax",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support node_modules imports",
      "status": "passing"
    },
    {
      "fileName": "sass",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sass.js",
      "title": "should support imports from includePaths",
      "status": "passing"
    },
    {
      "fileName": "schema-jsonld",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/schema-jsonld.js",
      "title": "Should parse a LD+JSON schema and collect dependencies",
      "status": "pending"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should not throw with JS included from HTML",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should not throw with JS dynamic imports included from HTML",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports default imports and exports of expressions",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports default imports and exports of declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports default imports and exports of anonymous declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports default imports and exports of variables",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports named imports and exports of declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports named imports and exports of variables",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports renaming superclass identifiers",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports renaming imports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports renaming exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports importing a namespace of exported values",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting all exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting all exports from multiple modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports importing all exports re-exported from multiple modules deep",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting all exports from multiple modules deep",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting individual named exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting default exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting a namespace from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "excludes default when re-exporting a module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports multiple exports of the same variable",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports live bindings of named exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports dynamic import syntax for code splitting",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports nested dynamic imports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should not export function arguments",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "throws a meaningful error on undefined exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports import default CommonJS interop",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports import default CommonJS interop with dynamic imports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports exporting an import",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports requiring a re-exported and renamed ES6 import",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports simultaneous import and re-export of a symbol",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports optimizing away an unused ES6 re-export",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should not optimize away an unused ES6 re-export and an used import",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "keeps side effects by default",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports the package.json sideEffects: false flag",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports wildcards with sideEffects: false",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports the package.json sideEffects flag with an array",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports the package.json sideEffects: false flag with shared dependencies",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "missing exports should be replaced with an empty object",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports importing a namespace from a commonjs module when code split",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "removes unused exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "removes unused function exports when minified",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "removes unused transpiled classes using terser when minified",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "support exporting a ES6 module exported as CommonJS",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support named imports on wrapped modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support the jsx pragma",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should not nameclash with internal variables",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should shake pure property assignments",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should correctly rename references to default exported classes",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should correctly rename references to a class in the class body",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of commonjs modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports default imports of commonjs modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports named imports of commonjs modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports namespace imports of commonjs modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 default export of expressions",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 default export of declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 default export of variables",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 named export of declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 named export of variables",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 renamed exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 module re-exporting all exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require of es6 module re-exporting all exports from multiple modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting individual named exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting default exports from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports re-exporting a namespace from another module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "excludes default when re-exporting a module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports hybrid ES6 + commonjs modules",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "inserts commonjs exports object in the right place",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "doesn't insert atlaspackRequire for missing non-js assets",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "define exports in the outermost scope",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports live bindings of named exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should wrap modules that use eval in a function",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should wrap modules that have a top-level return",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should wrap modules that access `module` as a free variable",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should wrap modules that non-statically access `module`",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports assigning to this as exports object",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports assigning to this as exports object in wrapped module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports module object properties",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports require.resolve calls",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports requiring a re-exported ES6 import",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports object pattern requires",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "eliminates CommonJS export object where possible",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports multiple assignments in one line",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports circular dependencies",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "executes modules in the correct order",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports conditional requires",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports requires inside functions",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports requires inside functions with es6 import side effects",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "hoists import calls to the top",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports requires inside functions with es6 re-export side effects",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "can bundle the node stream module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "missing exports should be replaced with an empty object",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "removes unused exports",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "supports removing an unused inline export with uglify minification",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support sideEffects: false",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support two aliases to the same module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support optional requires",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should insert __esModule interop flag when importing from an ES module",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support assigning to exports from inside a function",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should also hoist inserted polyfills of globals",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support wrapping array destructuring declarations",
      "status": "passing"
    },
    {
      "fileName": "scope-hoisting",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/scope-hoisting.js",
      "title": "should support wrapping object destructuring declarations",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve files",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve source files",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve a default page if the main bundle is an HTML asset",
      "status": "pending"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve a 404 if the file does not exist",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve a 500 if the bundler errored",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should support HTTPS",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should support HTTPS via custom certificate",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should support setting a public url",
      "status": "passing"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should serve static assets as well as html",
      "status": "pending"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should work with query parameters that contain a dot",
      "status": "pending"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should work with paths that contain a dot",
      "status": "pending"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should not log dev server access for log level <= 3",
      "status": "pending"
    },
    {
      "fileName": "server",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/server.js",
      "title": "should log dev server access for log level > 3",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "Should create a basic browser sourcemap",
      "status": "passing"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "Should create a basic node sourcemap",
      "status": "passing"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap for a js file with requires",
      "status": "passing"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap as a child of a TS bundle",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap as a child of a nested TS bundle",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap for a minified js bundle with requires",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should load existing sourcemaps of libraries",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should load inline sourcemaps of libraries",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should load referenced contents of sourcemaps",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap as a child of a CSS bundle",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap for a CSS bundle with imports",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap for a Sass asset",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap when for a CSS asset importing Sass",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should create a valid sourcemap for a LESS asset",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "should load existing sourcemaps for CSS files",
      "status": "pending"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "Should be able to create a sourcemap with inlined sources",
      "status": "passing"
    },
    {
      "fileName": "sourcemaps",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sourcemaps.js",
      "title": "Should be able to create inline sourcemaps",
      "status": "passing"
    },
    {
      "fileName": "stylus",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/stylus.js",
      "title": "should support requiring stylus files",
      "status": "passing"
    },
    {
      "fileName": "stylus",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/stylus.js",
      "title": "should support requiring stylus files with dependencies",
      "status": "passing"
    },
    {
      "fileName": "stylus",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/stylus.js",
      "title": "should support linking to assets with url() from stylus",
      "status": "passing"
    },
    {
      "fileName": "stylus",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/stylus.js",
      "title": "should support transforming stylus with css modules",
      "status": "passing"
    },
    {
      "fileName": "stylus",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/stylus.js",
      "title": "should support requiring stylus files with glob dependencies",
      "status": "passing"
    },
    {
      "fileName": "sugarss",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/sugarss.js",
      "title": "should correctly parse SugarSS asset",
      "status": "passing"
    },
    {
      "fileName": "ts-types",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/ts-types.js",
      "title": "should generate a typescript declaration file",
      "status": "passing"
    },
    {
      "fileName": "ts-types",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/ts-types.js",
      "title": "should generate ts declarations with imports",
      "status": "passing"
    },
    {
      "fileName": "ts-types",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/ts-types.js",
      "title": "should generate ts declarations with exports",
      "status": "passing"
    },
    {
      "fileName": "ts-types",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/ts-types.js",
      "title": "should generate ts declarations with imports",
      "status": "passing"
    },
    {
      "fileName": "typescript-tsc",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript-tsc.js",
      "title": "should support loading tsconfig.json",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should produce a ts bundle using ES6 imports",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should produce a ts bundle using commonJS require",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support json require",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support env variables",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support importing a URL to a raw asset",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should minify with minify enabled",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support compiling JSX",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should use esModuleInterop by default",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "fs.readFileSync should inline a file as a string",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should produce a ts bundle using ES6 imports",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should produce a ts bundle using commonJS require",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support json require",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support env variables",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support importing a URL to a raw asset",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should minify with minify enabled",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should support compiling JSX",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "should use esModuleInterop by default",
      "status": "passing"
    },
    {
      "fileName": "typescript",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/typescript.js",
      "title": "fs.readFileSync should inline a file as a string",
      "status": "passing"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a basic vue bundle",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a vue bundle with dependencies",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a vue bundle using preprocessors",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a vue bundle using a functional component",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a vue bundle using scoped styles",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a vue bundle using CSS modules",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should bundle nested components dynamically",
      "status": "pending"
    },
    {
      "fileName": "vue",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/vue.js",
      "title": "should produce a basic production vue bundle",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should preload a wasm file for a sync require",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should load a wasm file asynchronously with dynamic import",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should load a wasm file in parallel with a dynamic JS import",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should preload a wasm file for a sync require",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should load a wasm file asynchronously with dynamic import",
      "status": "pending"
    },
    {
      "fileName": "wasm",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/wasm.js",
      "title": "should load a wasm file in parallel with a dynamic JS import",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should rebuild on source file change",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should rebuild on a config file change",
      "status": "passing"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should rebuild properly when a dependency is removed",
      "status": "passing"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should re-generate bundle tree when files change",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should only re-package bundles that changed",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should unload assets that are orphaned",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should recompile all assets when a config file changes",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should rebuild if the file behind a symlink changes",
      "status": "pending"
    },
    {
      "fileName": "watcher",
      "link": "https://github.com/parcel-bundler/parcel/tree/v2/packages/core/integration-tests/test/watcher.js",
      "title": "should add and remove necessary runtimes to bundles",
      "status": "passing"
    }
  ]
}
