// @flow strict-local

import type {
  TraceEvent,
  IDisposable,
  PluginTracer as IPluginTracer,
} from '@atlaspack/types';
import type {
  TraceMeasurement as ITraceMeasurement,
  TraceMeasurementData,
} from './types';
import {ValueEmitter} from '@atlaspack/events';
import {performance} from 'perf_hooks';

declare export default class Tracer {
  enabled: boolean;
  onTrace(cb: (event: TraceEvent) => mixed): IDisposable;
  wrap(name: string, fn: () => mixed): Promise<void> ;
  createMeasurement(
    name: string,
    category?: string,
    argumentName?: string,
    otherArgs?: {[key: string]: mixed},
  ): ITraceMeasurement | null;
  enable(): void;
  disable(): void;
  trace(event: TraceEvent): void;
}

export var tracer: Tracer;

type TracerOpts = {|
  origin: string,
  category: string,
|};

declare export class PluginTracer implements IPluginTracer {
  enabled: boolean;
  constructor(opts: TracerOpts): PluginTracer;
  createMeasurement(
    name: string,
    category?: string,
    argumentName?: string,
    otherArgs?: {[key: string]: mixed},
  ): ITraceMeasurement | null;
}
