// @flow
import type {
  Encoding,
  FileCreateInvalidation,
  FilePath,
  InitialAtlaspackOptions,
  PackageManager,
} from '@atlaspack/types';

// This is defined in browser.js for wasm builds
declare export var init: void | (() => void);

export type WatchEventType = 'create' | 'update' | 'delete';

export interface WatchEvent {
  path: string;
  type: WatchEventType;
}

export type WatchEvents = Array<WatchEvent>;

export type Transferable = {||};

export type JsCallable<Args: $ReadOnlyArray<mixed>, Return> = (
  ...Args
) => Return | Promise<Return>;

export type ProjectPath = any;
export interface ConfigRequest {
  id: string;
  invalidateOnFileChange: Array<ProjectPath>;
  invalidateOnConfigKeyChange: Array<any>;
  invalidateOnFileCreate: Array<any>;
  invalidateOnEnvChange: Array<string>;
  invalidateOnOptionChange: Array<string>;
  invalidateOnStartup: boolean;
  invalidateOnBuild: boolean;
}
export interface RequestOptions {}

export interface FileSystem {
  canonicalize: JsCallable<[FilePath], FilePath>;
  createDirectory: JsCallable<[FilePath], Promise<void>>;
  cwd: JsCallable<[], FilePath>;
  isDir: JsCallable<[FilePath], boolean>;
  isFile: JsCallable<[FilePath], boolean>;
  readFile: JsCallable<[FilePath, Encoding], string>;
}

export type AtlaspackNapiOptions = {|
  fs?: FileSystem,
  nodeWorkers?: number,
  napiWorkerPool: any,
  options: {|
    featureFlags?: {[string]: string | boolean},
    corePath?: string,
    // TODO Use Omit when available in flow >0.210.0
    ...$Diff<
      InitialAtlaspackOptions,
      {|
        inputFS: InitialAtlaspackOptions['inputFS'],
        outputFS: InitialAtlaspackOptions['outputFS'],
        packageManager: InitialAtlaspackOptions['packageManager'],
      |},
    >,
  |},
  packageManager?: PackageManager,
  threads?: number,
|};

declare export class AtlaspackNapi {
  static create(options: AtlaspackNapiOptions, lmdb: mixed): AtlaspackNapi;
  nodeWorkerCount: number;
  buildAssetGraph(): Promise<any>;
  respondToFsEvents(events: WatchEvents): Promise<boolean>;
  static defaultThreadCount(): number;
  testingTempFsReadToString(path: string): string;
  testingTempFsIsDir(path: string): boolean;
  testingTempFsIsFile(path: string): boolean;
  testingRpcPing(): void;
}

declare export function getAvailableThreads(): number;

declare export function registerWorker(
  channel: Transferable,
  worker: any,
): void;

declare export function newNodejsWorker(delegate: any): Transferable;

declare export function initializeMonitoring(): void;
declare export function closeMonitoring(): void;
declare export function napiRunConfigRequest(
  configRequest: ConfigRequest,
  api: any,
  options: any,
): void;
declare export function findAncestorFile(
  filenames: Array<string>,
  from: string,
  root: string,
): string | null;
declare export function findFirstFile(names: Array<string>): string | null;
declare export function findNodeModule(
  module: string,
  from: string,
): string | null;
declare export function hashString(s: string): string;
declare export function hashBuffer(buf: Buffer): string;
declare export function optimizeImage(kind: string, buf: Buffer): Buffer;

export interface ResolveOptions {
  filename: string;
  specifierType: string;
  parent: string;
  packageConditions?: Array<string>;
}

export interface ResolveResult {
  resolution: Resolution;
  invalidateOnFileChange: Array<string>;
  invalidateOnFileCreate: Array<FileCreateInvalidation>;
  query?: string;
  sideEffects: boolean;
  error: mixed;
  moduleType: number;
}
export interface JsInvalidations {
  invalidateOnFileChange: Array<string>;
  invalidateOnFileCreate: Array<FileCreateInvalidation>;
  invalidateOnStartup: boolean;
}
declare export function transform(opts: any): any;
declare export function transformAsync(opts: any): Promise<any>;
declare export class Hash {
  writeString(s: string): void;
  writeBuffer(b: Buffer): void;
  finish(): string;
}

export type Engines = {|
  atlaspack?: string,
  browsers?: string | string[],
  electron?: string,
  node?: string,
|};

export type Environment = {|
  context: string,
  engines: Engines,
  includeNodeModules: IncludeNodeModules,
  isLibrary: boolean,
  loc?: SourceLocation,
  outputFormat: string,
  shouldScopeHoist: boolean,
  shouldOptimize: boolean,
  sourceMap?: {|
    inline?: boolean,
    inlineSources?: boolean,
    sourceRoot?: string,
  |},
  sourceType: string,
|};

export type SourceLocation = {|
  filePath: string,
  start: {|
    line: number,
    column: number,
  |},
  end: {|
    line: number,
    column: number,
  |},
|};

export type Symbol = {|
  local: string,
  exported: string,
  loc?: SourceLocation,
  isWeak: boolean,
  isEsmExport: boolean,
  selfReferenced: boolean,
|};

export type Target = {|
  distDir: string,
  distEntry?: string,
  env: Environment,
  loc?: SourceLocation,
  name: string,
  publicUrl: string,
|};

export type Dependency = {|
  bundleBehavior?: number,
  env: Environment,
  loc: SourceLocation,
  meta?: any,
  packageConditions: number[],
  pipeline?: string,
  priority: number,
  range?: string,
  resolveFrom?: string,
  sourceAssetId?: string,
  sourcePath?: string,
  specifier: string,
  specifierType: number,
  sourceAssetType?: string,
  symbols?: Symbol[],
  target?: Target,
  isEntry: boolean,
  isOptional: boolean,
  needsStableName: boolean,
  shouldWrap: boolean,
  isEsm: boolean,
  placeholder?: string,
|};

export type RpcAssetResult = {|
  id: string,
  bundleBehavior: ?number,
  filePath: string,
  type: string,
  code: Array<number>,
  meta: any,
  pipeline?: ?string,
  query?: string,
  symbols?: Symbol[],
  uniqueKey?: ?string,
  sideEffects: boolean,
  isBundleSplittable: boolean,
  isSource: boolean,
|};

export type RpcTransformerOpts = {|
  resolveFrom: string,
  specifier: string,
  options: RpcPluginOptions,
  asset: Asset,
|};

export type RpcHmrOptions = {|
  port?: number,
  host?: string,
|};

export type RpcPluginOptions = {|
  hmrOptions?: RpcHmrOptions,
  projectRoot: string,
|};

export type Asset = {|
  id: string,
  bundleBehavior: number,
  env: Environment,
  filePath: string,
  type: string,
  code: Array<number>,
  meta: any,
  pipeline?: string,
  query?: string,
  stats: {|
    size: number,
    time: number,
  |},
  symbols?: Symbol[],
  uniqueKey?: string,
  sideEffects: boolean,
  isBundleSplittable: boolean,
  isSource: boolean,
  hasCjsExports: boolean,
  staticExports: boolean,
  shouldWrap: boolean,
  hasNodeReplacements: boolean,
  isConstantModule: boolean,
  conditions: Array<{|
    key: string,
    ifTruePlaceholder?: string,
    ifFalsePlaceholder?: string,
  |}>,
  configPath?: string,
  configKeyPath?: string,
|};

declare export class Resolver {
  constructor(projectRoot: string, options: ResolverOptions): Resolver;
  resolve(options: ResolveOptions): ResolveResult;
  resolveAsync(options: ResolveOptions): Promise<ResolveResult>;
  getInvalidations(path: string): JsInvalidations;
}

export interface LmdbOptions {
  /** The database directory path */
  path: string;
  /**
   * If enabled, the database writer will set the following flags:
   *
   * * MAP_ASYNC - "use asynchronous msync when MDB_WRITEMAP is used"
   * * NO_SYNC - "don't fsync after commit"
   * * NO_META_SYNC - "don't fsync metapage after commit"
   *
   * `MDB_WRITEMAP` is on by default.
   */
  asyncWrites: boolean;
  /**
   * The mmap size, this corresponds to [`mdb_env_set_mapsize`](http://www.lmdb.tech/doc/group__mdb.html#gaa2506ec8dab3d969b0e609cd82e619e5)
   * if this isn't set it'll default to around 10MB.
   */
  mapSize?: number;
}

export interface LmdbEntry {
  key: string;
  value: Buffer;
}

declare export class Lmdb {
  constructor(options: LmdbOptions): Lmdb;
  get(key: string): Promise<Buffer | null | void>;
  getSync(key: string): Buffer | null;
  getManySync(keys: Array<string>): Array<Buffer | void | null>;
  putMany(entries: Array<LmdbEntry>): Promise<void>;
  put(key: string, data: Buffer): Promise<void>;
  putNoConfirm(key: string, data: Buffer): void;
  startReadTransaction(): void;
  commitReadTransaction(): void;
  startWriteTransaction(): Promise<void>;
  commitWriteTransaction(): Promise<void>;
  close(): void;
}

export interface InlineRequiresOptimizerInput {
  code: string;
  sourceMaps: boolean;
  ignoreModuleIds: Array<string>;
}
export interface InlineRequiresOptimizerResult {
  code: string;
  sourceMap?: string;
}

declare export function runInlineRequiresOptimizer(
  input: InlineRequiresOptimizerInput,
): InlineRequiresOptimizerResult;

export interface VCSFile {
  path: string;
  hash: number;
}

export interface YarnState {
  yarnLockPath: string;
  yarnLock: mixed;
  yarnState: mixed;
}

export interface VCSState {
  gitHash: string;
  // Files that have been modified since the last commit
  dirtyFiles: VCSFile[];
  yarnStates: YarnState[];
}

declare export function getVcsStateSnapshot(
  path: string,
  excludePatterns: Array<string>,
): VCSState;
export interface NodeChangeEvent {
  path: string;
  changeType: 'update' | 'create' | 'delete';
}

declare export function getEventsSince(
  repoPath: string,
  oldRev: string,
  newRev?: string | void | null,
): Array<NodeChangeEvent>;

declare export function createAssetId(params: mixed): string;
declare export function createDependencyId(params: mixed): string;
declare export function createEnvironmentId(params: mixed): string;

export interface ResolverOptions {
  fs?: JsFileSystemOptions;
  includeNodeModules?: IncludeNodeModules;
  conditions?: number;
  moduleDirResolver?: (...args: any[]) => any;
  mode: number;
  entries?: number;
  extensions?: Array<string>;
}

export interface JsFileSystemOptions {
  canonicalize: (string) => string;
  read: (string) => Buffer;
  isFile: (string) => boolean;
  isDir: (string) => boolean;
  includeNodeModules?: IncludeNodeModules;
}

// Types below break IDE highlighting, place them at the bottom of the file

export type IncludeNodeModules =
  | boolean
  | Array<string>
  | {|[string]: boolean|};

export type Resolution =
  | {|type: 'Path', value: string|}
  | {|type: 'Builtin', value: string|}
  | {|type: 'External'|}
  | {|type: 'Empty'|}
  | {|type: 'Global', value: string|};

declare export class AtlaspackTracer {
  constructor(): AtlaspackTracer;
  enter(label: string): number;
  exit(id: number): void;
}
