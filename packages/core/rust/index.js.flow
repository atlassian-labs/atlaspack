// @flow
import type {
  Encoding,
  FileCreateInvalidation,
  FilePath,
  InitialAtlaspackOptions,
  PackageManager,
} from '@atlaspack/types';

declare export var init: void | (() => void);

export type Transferable = {||};

export type ProjectPath = any;
export interface ConfigRequest {
  id: string;
  invalidateOnFileChange: Array<ProjectPath>;
  invalidateOnConfigKeyChange: Array<any>;
  invalidateOnFileCreate: Array<any>;
  invalidateOnEnvChange: Array<string>;
  invalidateOnOptionChange: Array<string>;
  invalidateOnStartup: boolean;
  invalidateOnBuild: boolean;
}
export interface RequestOptions {}

export interface FileSystem {
  canonicalize(path: FilePath): FilePath;
  cwd(): FilePath;
  isDir(path: FilePath): boolean;
  isFile(path: FilePath): boolean;
  readFile(path: FilePath, encoding?: Encoding): string;
}

export type AtlaspackNapiOptions = {|
  fs?: FileSystem,
  nodeWorkers?: number,
  options: {|
    corePath?: string,
    // TODO Use Omit when available in flow >0.210.0
    ...$Diff<
      InitialAtlaspackOptions,
      {|
        inputFS: InitialAtlaspackOptions['inputFS'],
        outputFS: InitialAtlaspackOptions['outputFS'],
        packageManager: InitialAtlaspackOptions['packageManager'],
      |},
    >,
  |},
  packageManager?: PackageManager,
  threads?: number,
|};

export type AtlaspackBuildOptions = {|
  registerWorker: (channel: Transferable) => void | Promise<void>,
|};

declare export class AtlaspackNapi {
  nodeWorkerCount: number;
  constructor(options: AtlaspackNapiOptions): AtlaspackNapi;
  build(options: AtlaspackBuildOptions): Promise<void>;
  buildAssetGraph(options: AtlaspackBuildOptions): Promise<any>;
  static defaultThreadCount(): number;
  testingTempFsReadToString(path: string): string;
  testingTempFsIsDir(path: string): boolean;
  testingTempFsIsFile(path: string): boolean;
  testingRpcPing(): void;
}

declare export function registerWorker(
  channel: Transferable,
  worker: any,
): void;

declare export function initializeMonitoring(): void;
declare export function closeMonitoring(): void;
declare export function napiRunConfigRequest(
  configRequest: ConfigRequest,
  api: any,
  options: any,
): void;
declare export function findAncestorFile(
  filenames: Array<string>,
  from: string,
  root: string,
): string | null;
declare export function findFirstFile(names: Array<string>): string | null;
declare export function findNodeModule(
  module: string,
  from: string,
): string | null;
declare export function hashString(s: string): string;
declare export function hashBuffer(buf: Buffer): string;
declare export function optimizeImage(kind: string, buf: Buffer): Buffer;
export interface JsFileSystemOptions {
  canonicalize: string => string;
  read: string => Buffer;
  isFile: string => boolean;
  isDir: string => boolean;
  includeNodeModules?: boolean | Array<string> | {|[string]: boolean|};
}
export interface ResolveOptions {
  filename: string;
  specifierType: string;
  parent: string;
  packageConditions?: Array<string>;
}
export type Resolution =
  | {|type: 'Path', value: string|}
  | {|type: 'Builtin', value: string|}
  | {|type: 'External'|}
  | {|type: 'Empty'|}
  | {|type: 'Global', value: string|};

export interface ResolveResult {
  resolution: Resolution;
  invalidateOnFileChange: Array<string>;
  invalidateOnFileCreate: Array<FileCreateInvalidation>;
  query?: string;
  sideEffects: boolean;
  error: mixed;
  moduleType: number;
}
export interface JsInvalidations {
  invalidateOnFileChange: Array<string>;
  invalidateOnFileCreate: Array<FileCreateInvalidation>;
  invalidateOnStartup: boolean;
}
declare export function transform(opts: any): any;
declare export function transformAsync(opts: any): Promise<any>;
declare export class Hash {
  writeString(s: string): void;
  writeBuffer(b: Buffer): void;
  finish(): string;
}
export interface ResolverOptions {
  fs?: JsFileSystemOptions;
  includeNodeModules?: boolean | Array<string> | {|[string]: boolean|};
  conditions?: number;
  moduleDirResolver?: (...args: any[]) => any;
  mode: number;
  entries?: number;
  extensions?: Array<string>;
}
declare export class Resolver {
  constructor(projectRoot: string, options: ResolverOptions): Resolver;
  resolve(options: ResolveOptions): ResolveResult;
  resolveAsync(options: ResolveOptions): Promise<ResolveResult>;
  getInvalidations(path: string): JsInvalidations;
}
declare export class ResolverOld {
  constructor(projectRoot: string, options: ResolverOptions): Resolver;
  resolve(options: ResolveOptions): ResolveResult;
  resolveAsync(options: ResolveOptions): Promise<ResolveResult>;
  getInvalidations(path: string): JsInvalidations;
}
