// @flow

// (Only covers the API that Parcel uses)
// Derived from the PostCSS docs available at
// http://api.postcss.org/postcss.html.

declare module 'postcss' {
  // eslint-disable-next-line import/no-extraneous-dependencies
  import type {SourceMapGenerator} from 'source-map';

  declare type Callback<T> = (T, number) => false | void;

  declare interface Input {
    file?: string;
  }

  declare interface Position {
    offset: number;
    column: number;
    line: number;
  }

  declare interface Source {
    input: Input;
    start?: Position;
    end?: Position;
  }

  declare interface Node {
    parent: Container;
    source: Source;
    +type: 'atrule' | 'comment' | 'decl' | 'root' | 'rule';
    toJSON(): mixed;
  }

  declare interface Decl extends Container {
    type: 'decl';
    prop: string;
    value: string;
    source: Source;
  }

  declare interface Rule extends Container {
    selector: string;
    type: 'rule';
    remove(): void;
  }

  declare interface AtRule extends Container {
    name: string;
    params: string;
    type: 'atrule';
    remove(): void;
  }

  declare interface Container extends Node {
    each(callback: Callback<Node>): false | void;
    nodes: Array<Node>;
    walk(callback: Callback<Node>): false | void;
    walkRules(callback: Callback<Rule>): false | void;
    walkDecls(nameFilter: string | RegExp, callback: Callback<Decl>): void;
    walkDecls(callback: Callback<Decl>): void;
    walkAtRules(nameFilter: string | RegExp, callback: Callback<AtRule>): void;
    walkAtRules(callback: Callback<AtRule>): void;
  }

  declare interface Root extends Container {}

  declare class Processor {
    process(
      css: string | Result | Root,
      opts?: ProcessOptions,
    ): Promise<Result>;
  }

  declare type ProcessOptions = $Shape<{|
    from: string,
    to: string,
    map: MapOptions,
    parser: Parser,
    stringifier: Stringifier,
    syntax: {|
      parser: Parser,
      stringifier: Stringifier,
    |},
  |}>;

  declare type MapOptions = {|
    inline?: boolean,
    prev?: string | any | false | function,
    sourcesContent?: boolean,
    annotation?: false | string,
    from?: string,
  |};

  declare type Parser = (
    css: string,
    optsopt: {|from?: string, map?: MapOptions|},
  ) => Root;

  declare type Plugin = {|
    postcss(...args: Array<any>): void,
  |};

  declare type PluginFunction = (root: Root, result: Result) => void;

  declare type Result = {
    content: string,
    css: string,
    map: SourceMapGenerator,
    messages: Array<Message>,
    opts: ProcessOptions,
    processor: Processor,
    root: Root,
    toString(): string,
    ...
  };

  declare type Message = {|
    type: string,
    plugin: string,
    file: string,
  |};

  declare type Builder = (
    part: string,
    node: Root,
    typeopt?: 'start' | 'end',
  ) => void;

  declare type Stringifier = (root: Root, builder: Builder) => void;

  declare module.exports: {
    (plugins?: Array<Plugin | PluginFunction> | Processor): Processor,
    parse: Parser,
    stringify: Stringifier,
    root: ($Shape<Node>) => Root,
    atRule: ($Shape<Node>) => Container,
    comment: ($Shape<Node>) => Node,
    decl: ($Shape<Node>) => Node,
    rule: ($Shape<Node>) => Container,
    fromJSON: <T: Node>(mixed) => T,
    ...
  };
}
